export const articles = [
  {
    h3: 'データテーブルも、UIに連動してJOINする時代',
    p: [
      '今、思いついた点について調べてみたところ、国内に限らず海外にもあまりなかったようなので書いてみようと思います。',
      '私の知る限り、RDBMSにおけるJOIN処理は複数のテーブルにまたがったデータを共通するキーで結合していく処理です。それはデータベースエンジンのメモリ上で行われます。',
      '一時的に結合し、継続的なテーブル増加に対応することができます。',
      'UIを持つWebアプリケーションなどの場合、UIの表示に合わせて表示するデータは、そこからさらに選別されるのが通常の流れのようです。',
      '',
      '一方で、UIに合わせてテーブルの結合が行われる、という記事については、一切見受けられません。記事がないのは、そもそもそういった需要がないのか、それともそういった点に至る要件がないのか。これは比較的新しいものなのか？',
      '理由は様々あると思います。',
      '私ぐらいのエンジニアレベルでも想像できるアイデアであることは、おそらく多くの方がすでに気づいていることでしょう。',
      '要件としてないので使用しなかったり、必要なかったりするのでしょう。',
      '',
      'ただ一方で、SQLの表現力に限界を感じており、可能な限りUIのために最適化したデータテーブルをプログラム言語のメモリ上に載せ直して、プログラム上でフロントエンドに必要なデータを提供することが煩わしく感じているならば、再考することは有効かもしれません。',
      'また、このようにSQLの表現力に限界を感じていなくても、フロントエンドにデータを渡す方法がJSONだけではないということを知っていれば、よりテーブルデータをそのまま表現したい時に設定がシンプルになると思います。',
      'それが実現できれば、私の思いつきは意義があるのではないかとも思えてきます。',
      '',
      '私はエンジニアとしては実務経験が浅く体感はありませんが、少し前はサーバーサイド言語としてPHPが流行っていたと聞いています。現在でもサーバーサイドの多くがPHPで作られているとも聞いています。',
      '今よくネットで見られる他の言語よりも、徐々にシェアは減っているようですが、まだまだ健在です。',
      '',
      'PHPを知ったきっかけは、サーバーサイドレンダリングについて調べていた時でした。',
      'これはサーバーサイドでクライアント側で表示するデータを表現し、実際にHTMLをサーバー側で生成し、',
      'ブラウザに送れば、すでに表示できる状態まで完了する流れのことを指します。',
      'ご想像の通り、このHTMLに, 結合したテーブルをそのまま表現すれば良いだけで、ものすごく基本的なことのように思えてきます。',
      'なぜ私はこの記事を見つけることができなかったのでしょうか？とても不思議です。',
      '',
      '現在、特にJavaScriptやTypeScriptの世界では、ここ2、3年でサーバーサイドレンダリングへの見直しが進んでいるように見受けられます。',
      '私もサーバーサイドレンダリングについては、ライブラリに依存しており、大変助かっています。',
      'もしこのJOIN処理が、「各APIエンドポイントに伴って段階的に行われたとしたら」どうでしょうか？',
      '例えば、エンドポイントAで、ベースとなるテーブルAを取得し、テーブルBはAと共通のキーを持つ別の情報を保持しています。このエンドポイントはテーブルABを常にサーバーサイドレンダリングでUIに返すことができます。',
      'また、エンドポイントABCを実装することで、ABC各テーブルを結合（あるいはフィルター）したデータを提供することができることをフロントエンドに示すとともに、そのエンドポイントは実際にテーブルABCを用いて情報が欲しい機能を提供するということが可能です。',
      'さらに、すでに結合したABがランタイム中、あるいはセッション上に残っていたとしたらどうでしょうか？',
      'また、ユーザーがページを開くと同時に、あるいはその要素がonLoadになったと表示されたと同時に, あるいはスクロールされるたびにエンドポイントが自動的に起動するとしたらどうでしょうか？',
      'ウェブアプリを利用するユーザーに連動して、必要なデータだけが提供されるという世界が想像されます。',
      '',
      '私が知らないだけで、普通の業務の中で行われているかもしれませんが、どなたかのインスピレーションになれば幸いです。',
    ],
  },
  {
    h3: '技術選定理由',
    p: [
      'nodeのみ、ブラウザのみに依存しない技術であること',
      '可能な限りw3c標準に従っていること',
      '結果再利用可能であること',
    ],
  },
  {
    h3: '今後進めていきたいこと',
    p: [
      '増加するAIエンジンとのUIの考察',
      'ローカルファーストアプリケーション',
      '端末に近い部分でのネットワークインフラ技術を追いかけること',
    ],
  },
  {
    h3: '選定の懸念点',
    p: [
      '1. レンダラの依存：2023.11.27現時点、jsx自体はほぼデファクトと判断している。Reactにとっての特別なものではなく、Htmlテンプレートとして考えることができる、という点では、選定技術のライブラリオーナーと意見は一致。',
      'レンダラ自体も多く出ているため、各種フレームワークが隆盛している限りは、jsxも生き残る',
      '今後もしのぎを削ってくれるかどうか...',
      '',
      '2. スケール：ルーティングをファイルパスで自動的に生成するファイルベースルーティングにはかなわない。',
      'これもライブラリ次第である。',
      '3. Htmxの確立：この概念自体は、フロントエンドフレームワークと一対となって受け入れられていくもので間違いないと思っている',
      'ただし、Htmxのコミュニティはふざけているとの噂が絶えないので、1軸として生き残ってくれることを期待する必要がある',
    ],
  },
]
